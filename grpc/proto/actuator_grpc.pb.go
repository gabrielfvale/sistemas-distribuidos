// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: actuator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActuatorClient is the client API for Actuator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActuatorClient interface {
	GetAvailableCommands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableCommandsResponse, error)
	IssueCommand(ctx context.Context, in *IssueCommandRequest, opts ...grpc.CallOption) (*IssueCommandResponse, error)
	GetProperties(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PropertiesResponse, error)
}

type actuatorClient struct {
	cc grpc.ClientConnInterface
}

func NewActuatorClient(cc grpc.ClientConnInterface) ActuatorClient {
	return &actuatorClient{cc}
}

func (c *actuatorClient) GetAvailableCommands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableCommandsResponse, error) {
	out := new(AvailableCommandsResponse)
	err := c.cc.Invoke(ctx, "/proto.Actuator/GetAvailableCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuatorClient) IssueCommand(ctx context.Context, in *IssueCommandRequest, opts ...grpc.CallOption) (*IssueCommandResponse, error) {
	out := new(IssueCommandResponse)
	err := c.cc.Invoke(ctx, "/proto.Actuator/IssueCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuatorClient) GetProperties(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PropertiesResponse, error) {
	out := new(PropertiesResponse)
	err := c.cc.Invoke(ctx, "/proto.Actuator/GetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActuatorServer is the server API for Actuator service.
// All implementations must embed UnimplementedActuatorServer
// for forward compatibility
type ActuatorServer interface {
	GetAvailableCommands(context.Context, *emptypb.Empty) (*AvailableCommandsResponse, error)
	IssueCommand(context.Context, *IssueCommandRequest) (*IssueCommandResponse, error)
	GetProperties(context.Context, *emptypb.Empty) (*PropertiesResponse, error)
	mustEmbedUnimplementedActuatorServer()
}

// UnimplementedActuatorServer must be embedded to have forward compatible implementations.
type UnimplementedActuatorServer struct {
}

func (UnimplementedActuatorServer) GetAvailableCommands(context.Context, *emptypb.Empty) (*AvailableCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCommands not implemented")
}
func (UnimplementedActuatorServer) IssueCommand(context.Context, *IssueCommandRequest) (*IssueCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCommand not implemented")
}
func (UnimplementedActuatorServer) GetProperties(context.Context, *emptypb.Empty) (*PropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedActuatorServer) mustEmbedUnimplementedActuatorServer() {}

// UnsafeActuatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActuatorServer will
// result in compilation errors.
type UnsafeActuatorServer interface {
	mustEmbedUnimplementedActuatorServer()
}

func RegisterActuatorServer(s grpc.ServiceRegistrar, srv ActuatorServer) {
	s.RegisterService(&Actuator_ServiceDesc, srv)
}

func _Actuator_GetAvailableCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActuatorServer).GetAvailableCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Actuator/GetAvailableCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActuatorServer).GetAvailableCommands(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actuator_IssueCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActuatorServer).IssueCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Actuator/IssueCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActuatorServer).IssueCommand(ctx, req.(*IssueCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actuator_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActuatorServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Actuator/GetProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActuatorServer).GetProperties(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Actuator_ServiceDesc is the grpc.ServiceDesc for Actuator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actuator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Actuator",
	HandlerType: (*ActuatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableCommands",
			Handler:    _Actuator_GetAvailableCommands_Handler,
		},
		{
			MethodName: "IssueCommand",
			Handler:    _Actuator_IssueCommand_Handler,
		},
		{
			MethodName: "GetProperties",
			Handler:    _Actuator_GetProperties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "actuator.proto",
}
